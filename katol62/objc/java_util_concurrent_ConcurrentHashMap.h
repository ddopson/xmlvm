#import "xmlvm.h"
#import "java_util_AbstractMap.h"
#import "java_util_concurrent_ConcurrentMap.h"
#import "java_io_Serializable.h"

// For circular include:
@class java_io_ObjectInputStream;
@class java_io_ObjectOutputStream;
@class java_io_Serializable;
@class java_lang_Class;
@class java_lang_IllegalArgumentException;
@class java_lang_Math;
@class java_lang_NullPointerException;
@class java_lang_Object;
@class java_util_AbstractMap;
@class java_util_Collection;
@class java_util_Enumeration;
@class java_util_Iterator;
@class java_util_Map;
@class java_util_Map_Entry;
@class java_util_Set;
@class java_util_concurrent_ConcurrentHashMap;
@class java_util_concurrent_ConcurrentHashMap_EntrySet;
@class java_util_concurrent_ConcurrentHashMap_HashEntry;
@class java_util_concurrent_ConcurrentHashMap_KeyIterator;
@class java_util_concurrent_ConcurrentHashMap_KeySet;
@class java_util_concurrent_ConcurrentHashMap_Segment;
@class java_util_concurrent_ConcurrentHashMap_ValueIterator;
@class java_util_concurrent_ConcurrentHashMap_Values;
@class java_util_concurrent_ConcurrentMap;

// Automatically generated by xmlvm2obj. Do not edit!


	
@interface java_util_concurrent_ConcurrentHashMap : java_util_AbstractMap <java_util_concurrent_ConcurrentMap,java_io_Serializable>
{
@public int segmentMask_int;
@public int segmentShift_int;
@public XMLVMArray* segments_java_util_concurrent_ConcurrentHashMap_Segment_ARRAYTYPE;
@public java_util_Set* _keySet_java_util_Set;
@public java_util_Set* entrySet_java_util_Set;
@public java_util_Collection* _values_java_util_Collection;

}
+ (void) initialize;
- (id) init;
+ (JAVA_LONG) _GET_serialVersionUID;
+ (void) _PUT_serialVersionUID: (JAVA_LONG) v;
+ (int) _GET_DEFAULT_INITIAL_CAPACITY;
+ (void) _PUT_DEFAULT_INITIAL_CAPACITY: (int) v;
+ (float) _GET_DEFAULT_LOAD_FACTOR;
+ (void) _PUT_DEFAULT_LOAD_FACTOR: (float) v;
+ (int) _GET_DEFAULT_CONCURRENCY_LEVEL;
+ (void) _PUT_DEFAULT_CONCURRENCY_LEVEL: (int) v;
+ (int) _GET_MAXIMUM_CAPACITY;
+ (void) _PUT_MAXIMUM_CAPACITY: (int) v;
+ (int) _GET_MAX_SEGMENTS;
+ (void) _PUT_MAX_SEGMENTS: (int) v;
+ (int) _GET_RETRIES_BEFORE_LOCK;
+ (void) _PUT_RETRIES_BEFORE_LOCK: (int) v;
+ (int) hash___int :(int)n1;
- (java_util_concurrent_ConcurrentHashMap_Segment*) segmentFor___int :(int)n1;
- (void) __init_java_util_concurrent_ConcurrentHashMap___int_float_int :(int)n1 :(float)n2 :(int)n3;
- (void) __init_java_util_concurrent_ConcurrentHashMap___int_float :(int)n1 :(float)n2;
- (void) __init_java_util_concurrent_ConcurrentHashMap___int :(int)n1;
- (void) __init_java_util_concurrent_ConcurrentHashMap__;
- (void) __init_java_util_concurrent_ConcurrentHashMap___java_util_Map :(java_util_Map*)n1;
- (int) isEmpty__;
- (int) size__;
- (java_lang_Object*) get___java_lang_Object :(java_lang_Object*)n1;
- (int) containsKey___java_lang_Object :(java_lang_Object*)n1;
- (int) containsValue___java_lang_Object :(java_lang_Object*)n1;
- (int) contains___java_lang_Object :(java_lang_Object*)n1;
- (java_lang_Object*) put___java_lang_Object_java_lang_Object :(java_lang_Object*)n1 :(java_lang_Object*)n2;
- (java_lang_Object*) putIfAbsent___java_lang_Object_java_lang_Object :(java_lang_Object*)n1 :(java_lang_Object*)n2;
- (void) putAll___java_util_Map :(java_util_Map*)n1;
- (java_lang_Object*) remove___java_lang_Object :(java_lang_Object*)n1;
- (int) remove___java_lang_Object_java_lang_Object :(java_lang_Object*)n1 :(java_lang_Object*)n2;
- (int) replace___java_lang_Object_java_lang_Object_java_lang_Object :(java_lang_Object*)n1 :(java_lang_Object*)n2 :(java_lang_Object*)n3;
- (java_lang_Object*) replace___java_lang_Object_java_lang_Object :(java_lang_Object*)n1 :(java_lang_Object*)n2;
- (void) clear__;
- (java_util_Set*) keySet__;
- (java_util_Collection*) values__;
- (java_util_Set*) entrySet__;
- (java_util_Enumeration*) keys__;
- (java_util_Enumeration*) elements__;
- (void) writeObject___java_io_ObjectOutputStream :(java_io_ObjectOutputStream*)n1;
- (void) readObject___java_io_ObjectInputStream :(java_io_ObjectInputStream*)n1;

@end

