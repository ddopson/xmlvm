#import "java_lang_AssertionError.h"
#import "java_lang_Class.h"
#import "java_lang_Double.h"
#import "java_lang_Float.h"
#import "java_lang_Math.h"

// Automatically generated by xmlvm2obj. Do not edit!


#import "sun_misc_FpUtils.h"
#import "org_xmlvm_iphone_NSObject.h"

double _STATIC_sun_misc_FpUtils_twoToTheDoubleScaleUp;
double _STATIC_sun_misc_FpUtils_twoToTheDoubleScaleDown;
int _STATIC_sun_misc_FpUtils__assertionsDisabled;

@implementation sun_misc_FpUtils;

+ (void) initialize
{
    if (strcmp(class_getName(self), "sun_misc_FpUtils") == 0) {
        [sun_misc_FpUtils __clinit_sun_misc_FpUtils];
    }
}

- (id) init
{
    if (self = [super init]) {
    }
    return self;
}

- (void) dealloc
{
    if (strcmp(object_getClassName(self), "sun_misc_FpUtils") == 0) {
        [self dealloc__];
    }
    [super dealloc];
}

+ (double) _GET_twoToTheDoubleScaleUp
{
    return _STATIC_sun_misc_FpUtils_twoToTheDoubleScaleUp;
}

+ (void) _PUT_twoToTheDoubleScaleUp: (double) v
{
    _STATIC_sun_misc_FpUtils_twoToTheDoubleScaleUp = v;
}

+ (double) _GET_twoToTheDoubleScaleDown
{
    return _STATIC_sun_misc_FpUtils_twoToTheDoubleScaleDown;
}

+ (void) _PUT_twoToTheDoubleScaleDown: (double) v
{
    _STATIC_sun_misc_FpUtils_twoToTheDoubleScaleDown = v;
}

+ (int) _GET__assertionsDisabled
{
    return _STATIC_sun_misc_FpUtils__assertionsDisabled;
}

+ (void) _PUT__assertionsDisabled: (int) v
{
    _STATIC_sun_misc_FpUtils__assertionsDisabled = v;
}

- (void) __init_sun_misc_FpUtils__
{
    XMLVMElem _r0;
    _r0.o = self;
    [_r0.o retain];
    [((java_lang_Object*) _r0.o) __init_java_lang_Object__];
    [_r0.o release];
    return;
}
+ (int) getExponent___double :(double)n1
{
    XMLVMElem _r0;
    XMLVMElem _r2;
    XMLVMElem _r4;
    _r4.d = n1;
    _r0.l = (long long)[java_lang_Double doubleToRawLongBits___double:_r4.d];
    _r2.l = 9218868437227405312;
    _r0.l = (long long)_r0.l & _r2.l;
    _r2.i = 52;
    _r0.l = _r0.l >> (0x3f & _r2.l);
    _r2.l = 1023;
    _r0.l = _r0.l - _r2.l;
    _r0.i = (int) _r0.l;
    return _r0.i;
}
+ (int) getExponent___float :(float)n1
{
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    _r2.f = n1;
    _r0.i = [java_lang_Float floatToRawIntBits___float:_r2.f];
    _r1.i = 2139095040;
    _r0.i = _r0.i & _r1.i;
    _r0.i = _r0.i >> 23;
    _r1.i = 127;
    _r0.i = _r0.i - _r1.i;
    return _r0.i;
}
+ (double) powerOfTwoD___int :(int)n1
{
    id        _ex = JAVA_NULL;
    XMLVMElem _r0;
    XMLVMElem _r2;
    XMLVMElem _r4;
    XMLVMElem _r5;
    _r4.i = n1;
    _r5.o = JAVA_NULL;
    _r0.i = [sun_misc_FpUtils _GET__assertionsDisabled];
    if (_r0.i != 0) goto label18;
    _r0.i = -1022;
    if (_r4.i < _r0.i) goto label12;
    _r0.i = 1023;
    if (_r4.i <= _r0.i) goto label18;
    label12:;
    _r5.o = [[java_lang_AssertionError alloc] init];
    [((java_lang_AssertionError*) _r5.o) __init_java_lang_AssertionError__];
    [_ex release];
    _ex = _r5.o;
   _r5.o = JAVA_NULL;
    @throw _ex;
      label18:;
    _r0.l = (JAVA_LONG) _r4.i;
    _r2.l = 1023;
    _r0.l = _r0.l + _r2.l;
    _r2.i = 52;
    _r0.l = _r0.l << (0x3f & _r2.l);
    _r2.l = 9218868437227405312;
    _r0.l = _r0.l & _r2.l;
    _r0.d = [java_lang_Double longBitsToDouble___long:_r0.l];
    [_r5.o release];
    [_ex release];
    return _r0.d;
}
+ (float) powerOfTwoF___int :(int)n1
{
    id        _ex = JAVA_NULL;
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    XMLVMElem _r3;
    _r2.i = n1;
    _r3.o = JAVA_NULL;
    _r0.i = [sun_misc_FpUtils _GET__assertionsDisabled];
    if (_r0.i != 0) goto label18;
    _r0.i = -126;
    if (_r2.i < _r0.i) goto label12;
    _r0.i = 127;
    if (_r2.i <= _r0.i) goto label18;
    label12:;
    _r3.o = [[java_lang_AssertionError alloc] init];
    [((java_lang_AssertionError*) _r3.o) __init_java_lang_AssertionError__];
    [_ex release];
    _ex = _r3.o;
   _r3.o = JAVA_NULL;
    @throw _ex;
      label18:;
    _r0.i = _r2.i + 127;
    _r0.i = _r0.i << 23;
    _r1.i = 2139095040;
    _r0.i = _r0.i & _r1.i;
    _r0.f = [java_lang_Float intBitsToFloat___int:_r0.i];
    [_r3.o release];
    [_ex release];
    return _r0.f;
}
+ (double) rawCopySign___double_double :(double)n1 :(double)n2
{
    XMLVMElem _r0;
    XMLVMElem _r2;
    XMLVMElem _r4;
    XMLVMElem _r6;
    XMLVMElem _r8;
    _r6.d = n1;
    _r8.d = n2;
    _r0.l = [java_lang_Double doubleToRawLongBits___double:_r8.d];
    _r2.l = -9223372036854775808;
    _r0.l = _r0.l & _r2.l;
    _r2.l = [java_lang_Double doubleToRawLongBits___double:_r6.d];
    _r4.l = 9223372036854775807;
    _r2.l = _r2.l & _r4.l;
    _r0.l = _r0.l | _r2.l;
    _r0.d = [java_lang_Double longBitsToDouble___long:_r0.l];
    return _r0.d;
}
+ (float) rawCopySign___float_float :(float)n1 :(float)n2
{
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    XMLVMElem _r3;
    XMLVMElem _r4;
    _r3.f = n1;
    _r4.f = n2;
    _r0.i = [java_lang_Float floatToRawIntBits___float:_r4.f];
    _r1.i = -2147483648;
    _r0.i = _r0.i & _r1.i;
    _r1.i = [java_lang_Float floatToRawIntBits___float:_r3.f];
    _r2.i = 2147483647;
    _r1.i = _r1.i & _r2.i;
    _r0.i = _r0.i | _r1.i;
    _r0.f = [java_lang_Float intBitsToFloat___int:_r0.i];
    return _r0.f;
}
+ (int) isFinite___double :(double)n1
{
    XMLVMElem _r0;
    XMLVMElem _r2;
    XMLVMElem _r4;
    _r4.d = n1;
    _r0.d = [java_lang_Math abs___double:_r4.d];
    _r2.d = 1.7976931348623157E308;
    _r0.i = _r0.d > _r2.d ? 1 : (_r0.d == _r2.d ? 0 : -1);
    if (_r0.i > 0) goto label15;
    _r0.i = 1;
    label14:;
    return _r0.i;
    label15:;
    _r0.i = 0;
    goto label14;
}
+ (int) isFinite___float :(float)n1
{
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    _r2.f = n1;
    _r0.f = [java_lang_Math abs___float:_r2.f];
    _r1.f = 3.4028235E38;
    _r0.i = _r0.f > _r1.f ? 1 : (_r0.f == _r1.f ? 0 : -1);
    if (_r0.i > 0) goto label13;
    _r0.i = 1;
    label12:;
    return _r0.i;
    label13:;
    _r0.i = 0;
    goto label12;
}
+ (int) isInfinite___double :(double)n1
{
    XMLVMElem _r0;
    XMLVMElem _r1;
    _r1.d = n1;
    _r0.i = [java_lang_Double isInfinite___double:_r1.d];
    return _r0.i;
}
+ (int) isInfinite___float :(float)n1
{
    XMLVMElem _r0;
    XMLVMElem _r1;
    _r1.f = n1;
    _r0.i = [java_lang_Float isInfinite___float:_r1.f];
    return _r0.i;
}
+ (int) isNaN___double :(double)n1
{
    XMLVMElem _r0;
    XMLVMElem _r1;
    _r1.d = n1;
    _r0.i = [java_lang_Double isNaN___double:_r1.d];
    return _r0.i;
}
+ (int) isNaN___float :(float)n1
{
    XMLVMElem _r0;
    XMLVMElem _r1;
    _r1.f = n1;
    _r0.i = [java_lang_Float isNaN___float:_r1.f];
    return _r0.i;
}
+ (int) isUnordered___double_double :(double)n1 :(double)n2
{
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r3;
    _r1.d = n1;
    _r3.d = n2;
    _r0.i = [sun_misc_FpUtils isNaN___double:_r1.d];
    if (_r0.i != 0) goto label12;
    _r0.i = [sun_misc_FpUtils isNaN___double:_r3.d];
    if (_r0.i == 0) goto label14;
    label12:;
    _r0.i = 1;
    label13:;
    return _r0.i;
    label14:;
    _r0.i = 0;
    goto label13;
}
+ (int) isUnordered___float_float :(float)n1 :(float)n2
{
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    _r1.f = n1;
    _r2.f = n2;
    _r0.i = [sun_misc_FpUtils isNaN___float:_r1.f];
    if (_r0.i != 0) goto label12;
    _r0.i = [sun_misc_FpUtils isNaN___float:_r2.f];
    if (_r0.i == 0) goto label14;
    label12:;
    _r0.i = 1;
    label13:;
    return _r0.i;
    label14:;
    _r0.i = 0;
    goto label13;
}
+ (int) ilogb___double :(double)n1
{
    id        _ex = JAVA_NULL;
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    XMLVMElem _r3;
    XMLVMElem _r5;
    XMLVMElem _r6;
    XMLVMElem _r8;
    XMLVMElem _r10;
    _r8.d = n1;
    _r10.o = JAVA_NULL;
    _r5.i = -1022;
    _r0.i = [sun_misc_FpUtils getExponent___double:_r8.d];
    switch (_r0.i) {
    case -1023: goto label37;
    case 1024: goto label25;
    }
    _r1.i = [sun_misc_FpUtils _GET__assertionsDisabled];
    if (_r1.i != 0) goto label33;
    if (_r0.i < _r5.i) goto label19;
    _r1.i = 1023;
    if (_r0.i <= _r1.i) goto label33;
    label19:;
    _r10.o = [[java_lang_AssertionError alloc] init];
    [((java_lang_AssertionError*) _r10.o) __init_java_lang_AssertionError__];
    [_ex release];
    _ex = _r10.o;
   _r10.o = JAVA_NULL;
    @throw _ex;
      label25:;
    _r0.i = [sun_misc_FpUtils isNaN___double:_r8.d];
    if (_r0.i == 0) goto label34;
    _r0.i = 1073741824;
    label33:;
    [_r10.o release];
    [_ex release];
    return _r0.i;
    label34:;
    _r0.i = 268435456;
    goto label33;
    label37:;
    _r1.d = 0.0;
    _r1.i = _r8.d > _r1.d ? 1 : (_r8.d == _r1.d ? 0 : -1);
    if (_r1.i != 0) goto label46;
    _r0.i = -268435456;
    goto label33;
    label46:;
    _r1.l = [java_lang_Double doubleToRawLongBits___double:_r8.d];
    _r3.l = 4503599627370495;
    _r1.l = _r1.l & _r3.l;
    _r3.i = [sun_misc_FpUtils _GET__assertionsDisabled];
    if (_r3.i != 0) goto label102;
    _r3.l = 0;
    _r3.i = _r1.l > _r3.l ? 1 : (_r1.l == _r3.l ? 0 : -1);
    if (_r3.i != 0) goto label102;
    _r10.o = [[java_lang_AssertionError alloc] init];
    [((java_lang_AssertionError*) _r10.o) __init_java_lang_AssertionError__];
    [_ex release];
    _ex = _r10.o;
   _r10.o = JAVA_NULL;
    @throw _ex;
      label72:;
    _r3.l = 4503599627370496;
    _r3.i = _r0.l > _r3.l ? 1 : (_r0.l == _r3.l ? 0 : -1);
    if (_r3.i >= 0) goto label84;
    _r3.l = 2;
    _r0.l = _r0.l * _r3.l;
    _r2.i = _r2.i + -1;
    goto label72;
    label84:;
    _r0.i = _r2.i + 1;
    _r1.i = [sun_misc_FpUtils _GET__assertionsDisabled];
    if (_r1.i != 0) goto label33;
    _r1.i = -1074;
    if (_r0.i < _r1.i) goto label96;
    if (_r0.i < _r5.i) goto label33;
    label96:;
    [_r10.o release];
    _r10.o = [[java_lang_AssertionError alloc] init];
    [((java_lang_AssertionError*) _r10.o) __init_java_lang_AssertionError__];
    [_ex release];
    _ex = _r10.o;
   _r10.o = JAVA_NULL;
    @throw _ex;
      label102:;
    _r6 = _r1;
    _r2 = _r0;
    _r0 = _r6;
    goto label72;
    label106:;
}
+ (int) ilogb___float :(float)n1
{
    id        _ex = JAVA_NULL;
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    XMLVMElem _r3;
    XMLVMElem _r4;
    XMLVMElem _r5;
    XMLVMElem _r6;
    _r5.f = n1;
    _r6.o = JAVA_NULL;
    _r3.i = -126;
    _r0.i = [sun_misc_FpUtils getExponent___float:_r5.f];
    switch (_r0.i) {
    case -127: goto label37;
    case 128: goto label25;
    }
    _r1.i = [sun_misc_FpUtils _GET__assertionsDisabled];
    if (_r1.i != 0) goto label33;
    if (_r0.i < _r3.i) goto label19;
    _r1.i = 127;
    if (_r0.i <= _r1.i) goto label33;
    label19:;
    _r6.o = [[java_lang_AssertionError alloc] init];
    [((java_lang_AssertionError*) _r6.o) __init_java_lang_AssertionError__];
    [_ex release];
    _ex = _r6.o;
   _r6.o = JAVA_NULL;
    @throw _ex;
      label25:;
    _r0.i = [sun_misc_FpUtils isNaN___float:_r5.f];
    if (_r0.i == 0) goto label34;
    _r0.i = 1073741824;
    label33:;
    [_r6.o release];
    [_ex release];
    return _r0.i;
    label34:;
    _r0.i = 268435456;
    goto label33;
    label37:;
    _r1.f = 0.0;
    _r1.i = _r5.f > _r1.f ? 1 : (_r5.f == _r1.f ? 0 : -1);
    if (_r1.i != 0) goto label45;
    _r0.i = -268435456;
    goto label33;
    label45:;
    _r1.i = [java_lang_Float floatToRawIntBits___float:_r5.f];
    _r2.i = 8388607;
    _r1.i = _r1.i & _r2.i;
    _r2.i = [sun_misc_FpUtils _GET__assertionsDisabled];
    if (_r2.i != 0) goto label92;
    if (_r1.i != 0) goto label92;
    _r6.o = [[java_lang_AssertionError alloc] init];
    [((java_lang_AssertionError*) _r6.o) __init_java_lang_AssertionError__];
    [_ex release];
    _ex = _r6.o;
   _r6.o = JAVA_NULL;
    @throw _ex;
      label65:;
    _r2.i = 8388608;
    if (_r0.i >= _r2.i) goto label74;
    _r0.i = _r0.i * 2;
    _r1.i = _r1.i + -1;
    goto label65;
    label74:;
    _r0.i = _r1.i + 1;
    _r1.i = [sun_misc_FpUtils _GET__assertionsDisabled];
    if (_r1.i != 0) goto label33;
    _r1.i = -149;
    if (_r0.i < _r1.i) goto label86;
    if (_r0.i < _r3.i) goto label33;
    label86:;
    [_r6.o release];
    _r6.o = [[java_lang_AssertionError alloc] init];
    [((java_lang_AssertionError*) _r6.o) __init_java_lang_AssertionError__];
    [_ex release];
    _ex = _r6.o;
   _r6.o = JAVA_NULL;
    @throw _ex;
      label92:;
    _r4 = _r1;
    _r1 = _r0;
    _r0 = _r4;
    goto label65;
    label96:;
}
+ (double) scalb___double_int :(double)n1 :(int)n2
{
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    XMLVMElem _r3;
    XMLVMElem _r4;
    XMLVMElem _r5;
    XMLVMElem _r7;
    XMLVMElem _r9;
    XMLVMElem _r11;
    _r9.d = n1;
    _r11.i = n2;
    if (_r11.i >= 0) goto label38;
    _r0.i = -2099;
    _r0.i = [java_lang_Math max___int_int:_r11.i:_r0.i];
    _r1.i = -512;
    _r2.d = [sun_misc_FpUtils _GET_twoToTheDoubleScaleDown];
    _r7 = _r2;
    _r2 = _r1;
    _r3 = _r0;
    _r0 = _r7;
    label16:;
    _r4.i = _r3.i >> 8;
    _r4.i = ((unsigned int) _r4.i) >> (0x1f & ((unsigned int) 23));
    _r5.i = _r3.i + _r4.i;
    _r5.i = _r5.i & 511;
    _r4.i = _r5.i - _r4.i;
    _r5.d = [sun_misc_FpUtils powerOfTwoD___int:_r4.i];
    _r5.d = _r5.d * _r9.d;
    _r3.i = _r3.i - _r4.i;
    _r4 = _r5;
    label33:;
    if (_r3.i == 0) goto label53;
    _r4.d = _r4.d * _r0.d;
    _r3.i = _r3.i - _r2.i;
    goto label33;
    label38:;
    _r0.i = 2099;
    _r0.i = [java_lang_Math min___int_int:_r11.i:_r0.i];
    _r1.i = 512;
    _r2.d = [sun_misc_FpUtils _GET_twoToTheDoubleScaleUp];
    _r7 = _r2;
    _r2 = _r1;
    _r3 = _r0;
    _r0 = _r7;
    goto label16;
    label53:;
    return _r4.d;
}
+ (double) scalb___float_int :(float)n1 :(int)n2
{
    /*
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r3;
    XMLVMElem _r5;
    XMLVMElem _r6;
    _r5.f = n1;
    _r6.i = n2;
    _r0.i = 278;
    _r0.i = [java_lang_Math min___int_int:_r6.i:_r0.i];
    _r1.i = -278;
    _r0.i = [java_lang_Math max___int_int:_r0.i:_r1.i];
    _r1.d = (double) _r5.f;
    _r3.d = [sun_misc_FpUtils powerOfTwoD___int:_r0.i];
    _r0.d = _r1.d * _r3.d;
    _r0.f = (float) _r0.d;
    return _r0.f;
    */
    
    double d = n1;
    int scale_factor = n2;
    
    int MAX_SCALE = 1023 + 1022 + 53 + 1;
    int exp_adjust = 0;
    int scale_increment = 0;
    double exp_delta = NAN;
    
    // Make sure scaling factor is in a reasonable range
    
    if(n2 < 0) {
        scale_factor = MAX(scale_factor, -MAX_SCALE);
        scale_increment = -512;
        exp_delta = [sun_misc_FpUtils powerOfTwoD___int:scale_increment];
    }
    else {
        scale_factor = MIN(scale_factor, MAX_SCALE);
        scale_increment = 512;
        exp_delta = [sun_misc_FpUtils powerOfTwoD___int:scale_increment];
    }
    
    // Calculate (scale_factor % +/-512), 512 = 2^9, using
    // technique from "Hacker's Delight" section 10-2.
    int t = (scale_factor >> 9-1) >> 32 - 9;
    exp_adjust = ((scale_factor + t) & (512 -1)) - t;
    
    d *= [sun_misc_FpUtils powerOfTwoD___int:exp_adjust];//powerOfTwoD(exp_adjust);
    scale_factor -= exp_adjust;
    
    while(scale_factor != 0) {
        d *= exp_delta;
        scale_factor -= scale_increment;
    }
    return d;
    
}
+ (double) nextAfter___double_double :(double)n1 :(double)n2
{
    id        _ex = JAVA_NULL;
    XMLVMElem _r0;
    XMLVMElem _r2;
    XMLVMElem _r3;
    XMLVMElem _r5;
    XMLVMElem _r7;
    XMLVMElem _r9;
    XMLVMElem _r11;
    _r7.d = n1;
    _r9.d = n2;
    _r11.o = JAVA_NULL;
    _r5.l = 1;
    _r3.l = 0;
    _r0.i = [sun_misc_FpUtils isNaN___double:_r7.d];
    if (_r0.i != 0) goto label16;
    _r0.i = [sun_misc_FpUtils isNaN___double:_r9.d];
    if (_r0.i == 0) goto label19;
    label16:;
    _r0.d = _r7.d + _r9.d;
    label18:;
    [_r11.o release];
    [_ex release];
    return _r0.d;
    label19:;
    _r0.i = _r7.d > _r9.d ? 1 : (_r7.d == _r9.d ? 0 : -1);
    if (_r0.i != 0) goto label25;
    _r0 = _r9;
    goto label18;
    label25:;
    _r0.d = 0.0;
    _r0.d = _r0.d + _r7.d;
    _r0.l = [java_lang_Double doubleToRawLongBits___double:_r0.d];
    _r2.i = _r9.d > _r7.d ? 1 : (_r9.d == _r7.d ? 0 : -1);
    if (_r2.i <= 0) goto label50;
    _r2.i = _r0.l > _r3.l ? 1 : (_r0.l == _r3.l ? 0 : -1);
    if (_r2.i < 0) goto label47;
    _r2 = _r5;
    label41:;
    _r0.l = _r0.l + _r2.l;
    label42:;
    _r0.d = [java_lang_Double longBitsToDouble___long:_r0.l];
    goto label18;
    label47:;
    _r2.l = -1;
    goto label41;
    label50:;
    _r2.i = [sun_misc_FpUtils _GET__assertionsDisabled];
    if (_r2.i != 0) goto label64;
    _r2.i = _r9.d > _r7.d ? 1 : (_r9.d == _r7.d ? 0 : -1);
    if (_r2.i < 0) goto label64;
    _r11.o = [[java_lang_AssertionError alloc] init];
    [((java_lang_AssertionError*) _r11.o) __init_java_lang_AssertionError__];
    [_ex release];
    _ex = _r11.o;
   _r11.o = JAVA_NULL;
    @throw _ex;
      label64:;
    _r2.i = _r0.l > _r3.l ? 1 : (_r0.l == _r3.l ? 0 : -1);
    if (_r2.i <= 0) goto label70;
    _r0.l = _r0.l - _r5.l;
    goto label42;
    label70:;
    _r2.i = _r0.l > _r3.l ? 1 : (_r0.l == _r3.l ? 0 : -1);
    if (_r2.i >= 0) goto label76;
    _r0.l = _r0.l + _r5.l;
    goto label42;
    label76:;
    _r0.l = -9223372036854775807;
    goto label42;
}
+ (float) nextAfter___float_double :(float)n1 :(double)n2
{
    id        _ex = JAVA_NULL;
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r3;
    XMLVMElem _r4;
    XMLVMElem _r6;
    _r3.f = n1;
    _r4.d = n2;
    _r6.o = JAVA_NULL;
    _r0.i = [sun_misc_FpUtils isNaN___float:_r3.f];
    if (_r0.i != 0) goto label12;
    _r0.i = [sun_misc_FpUtils isNaN___double:_r4.d];
    if (_r0.i == 0) goto label15;
    label12:;
    _r0.f = (float) _r4.d;
    _r0.f = _r0.f + _r3.f;
    label14:;
    [_r6.o release];
    [_ex release];
    return _r0.f;
    label15:;
    _r0.d = (double) _r3.f;
    _r0.i = _r0.d > _r4.d ? 1 : (_r0.d == _r4.d ? 0 : -1);
    if (_r0.i != 0) goto label22;
    _r0.f = (float) _r4.d;
    goto label14;
    label22:;
    _r0.f = 0.0;
    _r0.f = _r0.f + _r3.f;
    _r0.i = [java_lang_Float floatToRawIntBits___float:_r0.f];
    _r1.d = (double) _r3.f;
    _r1.i = _r4.d > _r1.d ? 1 : (_r4.d == _r1.d ? 0 : -1);
    if (_r1.i <= 0) goto label44;
    if (_r0.i < 0) goto label42;
    _r1.i = 1;
    label36:;
    _r0.i = _r0.i + _r1.i;
    label37:;
    _r0.f = [java_lang_Float intBitsToFloat___int:_r0.i];
    goto label14;
    label42:;
    _r1.i = -1;
    goto label36;
    label44:;
    _r1.i = [sun_misc_FpUtils _GET__assertionsDisabled];
    if (_r1.i != 0) goto label59;
    _r1.d = (double) _r3.f;
    _r1.i = _r4.d > _r1.d ? 1 : (_r4.d == _r1.d ? 0 : -1);
    if (_r1.i < 0) goto label59;
    _r6.o = [[java_lang_AssertionError alloc] init];
    [((java_lang_AssertionError*) _r6.o) __init_java_lang_AssertionError__];
    [_ex release];
    _ex = _r6.o;
   _r6.o = JAVA_NULL;
    @throw _ex;
      label59:;
    if (_r0.i <= 0) goto label64;
    _r0.i = _r0.i + -1;
    goto label37;
    label64:;
    if (_r0.i >= 0) goto label69;
    _r0.i = _r0.i + 1;
    goto label37;
    label69:;
    _r0.i = -2147483647;
    goto label37;
}
+ (double) nextUp___double :(double)n1
{
    XMLVMElem _r0;
    XMLVMElem _r2;
    XMLVMElem _r4;
    XMLVMElem _r6;
    _r6.d = n1;
    _r4.d = 0.0;
    _r0.i = [sun_misc_FpUtils isNaN___double:_r6.d];
    if (_r0.i != 0) goto label14;
    _r0.d = Infinity;
    _r0.i = _r6.d > _r0.d ? 1 : (_r6.d == _r0.d ? 0 : -1);
    if (_r0.i != 0) goto label16;
    label14:;
    _r0 = _r6;
    label15:;
    return _r0.d;
    label16:;
    _r0.d = _r6.d + _r4.d;
    _r2.l = [java_lang_Double doubleToRawLongBits___double:_r0.d];
    _r0.i = _r0.d > _r4.d ? 1 : (_r0.d == _r4.d ? 0 : -1);
    if (_r0.i < 0) goto label34;
    _r0.l = 1;
    label28:;
    _r0.l = _r0.l + _r2.l;
    _r0.d = [java_lang_Double longBitsToDouble___long:_r0.l];
    goto label15;
    label34:;
    _r0.l = -1;
    goto label28;
}
+ (float) nextUp___float :(float)n1
{
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    XMLVMElem _r3;
    _r3.f = n1;
    _r2.f = 0.0;
    _r0.i = [sun_misc_FpUtils isNaN___float:_r3.f];
    if (_r0.i != 0) goto label13;
    _r0.f = Infinity;
    _r0.i = _r3.f > _r0.f ? 1 : (_r3.f == _r0.f ? 0 : -1);
    if (_r0.i != 0) goto label15;
    label13:;
    _r0 = _r3;
    label14:;
    return _r0.f;
    label15:;
    _r0.f = _r3.f + _r2.f;
    _r1.i = [java_lang_Float floatToRawIntBits___float:_r0.f];
    _r0.i = _r0.f > _r2.f ? 1 : (_r0.f == _r2.f ? 0 : -1);
    if (_r0.i < 0) goto label32;
    _r0.i = 1;
    label26:;
    _r0.i = _r0.i + _r1.i;
    _r0.f = [java_lang_Float intBitsToFloat___int:_r0.i];
    goto label14;
    label32:;
    _r0.i = -1;
    goto label26;
}
+ (double) nextDown___double :(double)n1
{
    XMLVMElem _r0;
    XMLVMElem _r2;
    XMLVMElem _r4;
    _r4.d = n1;
    _r2.d = 0.0;
    _r0.i = [sun_misc_FpUtils isNaN___double:_r4.d];
    if (_r0.i != 0) goto label14;
    _r0.d = -Infinity;
    _r0.i = _r4.d > _r0.d ? 1 : (_r4.d == _r0.d ? 0 : -1);
    if (_r0.i != 0) goto label16;
    label14:;
    _r0 = _r4;
    label15:;
    return _r0.d;
    label16:;
    _r0.i = _r4.d > _r2.d ? 1 : (_r4.d == _r2.d ? 0 : -1);
    if (_r0.i != 0) goto label26;
    _r0.d = -4.9E-324;
    goto label15;
    label26:;
    _r0.l = [java_lang_Double doubleToRawLongBits___double:_r4.d];
    _r2.i = _r4.d > _r2.d ? 1 : (_r4.d == _r2.d ? 0 : -1);
    if (_r2.i <= 0) goto label42;
    _r2.l = -1;
    label36:;
    _r0.l = _r0.l + _r2.l;
    _r0.d = [java_lang_Double longBitsToDouble___long:_r0.l];
    goto label15;
    label42:;
    _r2.l = 1;
    goto label36;
}
+ (double) nextDown___float :(float)n1
{
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    _r2.f = n1;
    _r1.f = 0.0;
    _r0.i = [sun_misc_FpUtils isNaN___float:_r2.f];
    if (_r0.i != 0) goto label13;
    _r0.f = -Infinity;
    _r0.i = _r2.f > _r0.f ? 1 : (_r2.f == _r0.f ? 0 : -1);
    if (_r0.i != 0) goto label15;
    label13:;
    _r0.d = (double) _r2.f;
    label14:;
    return _r0.d;
    label15:;
    _r0.i = _r2.f > _r1.f ? 1 : (_r2.f == _r1.f ? 0 : -1);
    if (_r0.i != 0) goto label22;
    _r0.d = -1.401298464324817E-45;
    goto label14;
    label22:;
    _r0.i = [java_lang_Float floatToRawIntBits___float:_r2.f];
    _r1.i = _r2.f > _r1.f ? 1 : (_r2.f == _r1.f ? 0 : -1);
    if (_r1.i <= 0) goto label38;
    _r1.i = -1;
    label31:;
    _r0.i = _r0.i + _r1.i;
    _r0.f = [java_lang_Float intBitsToFloat___int:_r0.i];
    _r0.d = (double) _r0.f;
    goto label14;
    label38:;
    _r1.i = 1;
    goto label31;
}
+ (double) copySign___double_double :(double)n1 :(double)n2
{
    XMLVMElem _r0;
    XMLVMElem _r2;
    XMLVMElem _r4;
    _r2.d = n1;
    _r4.d = n2;
    _r0.i = [sun_misc_FpUtils isNaN___double:_r4.d];
    if (_r0.i == 0) goto label13;
    _r0.d = 1.0;
    label8:;
    _r0.d = [sun_misc_FpUtils rawCopySign___double_double:_r2.d:_r0.d];
    return _r0.d;
    label13:;
    _r0 = _r4;
    goto label8;
}
+ (float) copySign___float_float :(float)n1 :(float)n2
{
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    _r1.f = n1;
    _r2.f = n2;
    _r0.i = [sun_misc_FpUtils isNaN___float:_r2.f];
    if (_r0.i == 0) goto label13;
    _r0.f = 1.0;
    label8:;
    _r0.f = [sun_misc_FpUtils rawCopySign___float_float:_r1.f:_r0.f];
    return _r0.f;
    label13:;
    _r0 = _r2;
    goto label8;
}
+ (double) ulp___double :(double)n1
{
    id        _ex = JAVA_NULL;
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    XMLVMElem _r3;
    XMLVMElem _r4;
    XMLVMElem _r6;
    _r4.d = n1;
    _r6.o = JAVA_NULL;
    _r2.i = -1022;
    _r0.i = [sun_misc_FpUtils getExponent___double:_r4.d];
    switch (_r0.i) {
    case -1023: goto label30;
    case 1024: goto label25;
    }
    _r1.i = [sun_misc_FpUtils _GET__assertionsDisabled];
    if (_r1.i != 0) goto label33;
    _r1.i = 1023;
    if (_r0.i > _r1.i) goto label19;
    if (_r0.i >= _r2.i) goto label33;
    label19:;
    _r6.o = [[java_lang_AssertionError alloc] init];
    [((java_lang_AssertionError*) _r6.o) __init_java_lang_AssertionError__];
    [_ex release];
    _ex = _r6.o;
   _r6.o = JAVA_NULL;
    @throw _ex;
      label25:;
    _r0.d = [java_lang_Math abs___double:_r4.d];
    label29:;
    [_r6.o release];
    [_ex release];
    return _r0.d;
    label30:;
    _r0.d = 4.9E-324;
    goto label29;
    label33:;
    _r1.i = 52;
    _r0.i = _r0.i - _r1.i;
    if (_r0.i < _r2.i) goto label43;
    _r0.d = [sun_misc_FpUtils powerOfTwoD___int:_r0.i];
    goto label29;
    label43:;
    _r1.l = 1;
    _r3.i = -1074;
    _r0.i = _r0.i - _r3.i;
    _r0.l = _r1.l << (0x3f & _r0.l);
    _r0.d = [java_lang_Double longBitsToDouble___long:_r0.l];
    goto label29;
    label56:;
}
+ (float) ulp___float :(float)n1
{
    id        _ex = JAVA_NULL;
    XMLVMElem _r0;
    XMLVMElem _r1;
    XMLVMElem _r2;
    XMLVMElem _r3;
    XMLVMElem _r4;
    _r3.f = n1;
    _r4.o = JAVA_NULL;
    _r2.i = -126;
    _r0.i = [sun_misc_FpUtils getExponent___float:_r3.f];
    switch (_r0.i) {
    case -127: goto label30;
    case 128: goto label25;
    }
    _r1.i = [sun_misc_FpUtils _GET__assertionsDisabled];
    if (_r1.i != 0) goto label32;
    _r1.i = 127;
    if (_r0.i > _r1.i) goto label19;
    if (_r0.i >= _r2.i) goto label32;
    label19:;
    _r4.o = [[java_lang_AssertionError alloc] init];
    [((java_lang_AssertionError*) _r4.o) __init_java_lang_AssertionError__];
    [_ex release];
    _ex = _r4.o;
   _r4.o = JAVA_NULL;
    @throw _ex;
      label25:;
    _r0.f = [java_lang_Math abs___float:_r3.f];
    label29:;
    [_r4.o release];
    [_ex release];
    return _r0.f;
    label30:;
    _r0.f = 1.4E-45;
    goto label29;
    label32:;
    _r1.i = 23;
    _r0.i = _r0.i - _r1.i;
    if (_r0.i < _r2.i) goto label42;
    _r0.f = [sun_misc_FpUtils powerOfTwoF___int:_r0.i];
    goto label29;
    label42:;
    _r1.i = 1;
    _r2.i = -149;
    _r0.i = _r0.i - _r2.i;
    _r0.i = _r1.i << _r0.i;
    _r0.f = [java_lang_Float intBitsToFloat___int:_r0.i];
    goto label29;
    label54:;
}
+ (double) signum___double :(double)n1
{
    XMLVMElem _r0;
    XMLVMElem _r2;
    _r2.d = n1;
    _r0.d = 0.0;
    _r0.i = _r2.d > _r0.d ? 1 : (_r2.d == _r0.d ? 0 : -1);
    if (_r0.i == 0) goto label12;
    _r0.i = [sun_misc_FpUtils isNaN___double:_r2.d];
    if (_r0.i == 0) goto label14;
    label12:;
    _r0 = _r2;
    label13:;
    return _r0.d;
    label14:;
    _r0.d = 1.0;
    _r0.d = [sun_misc_FpUtils copySign___double_double:_r0.d:_r2.d];
    goto label13;
}
+ (float) signum___float :(float)n1
{
    XMLVMElem _r0;
    XMLVMElem _r1;
    _r1.f = n1;
    _r0.f = 0.0;
    _r0.i = _r1.f > _r0.f ? 1 : (_r1.f == _r0.f ? 0 : -1);
    if (_r0.i == 0) goto label11;
    _r0.i = [sun_misc_FpUtils isNaN___float:_r1.f];
    if (_r0.i == 0) goto label13;
    label11:;
    _r0 = _r1;
    label12:;
    return _r0.f;
    label13:;
    _r0.f = 1.0;
    _r0.f = [sun_misc_FpUtils copySign___float_float:_r0.f:_r1.f];
    goto label12;
}
+ (void) __clinit_sun_misc_FpUtils
{
    XMLVMElem _rtmp;
    XMLVMElem _r0;
    _r0.o = JAVA_NULL;
    _r0.o = [sun_misc_FpUtils getClass__];
    _rtmp.o =  _r0.o;
    _r0.i = [((java_lang_Class*) _r0.o) desiredAssertionStatus__];
    [_rtmp.o release];
    _rtmp.o = JAVA_NULL;
    if (_r0.i != 0) goto label28;
    _r0.i = 1;
    label9:;
    [sun_misc_FpUtils _PUT__assertionsDisabled: _r0.i];
    _r0.i = 512;
    _r0.d = [sun_misc_FpUtils powerOfTwoD___int:_r0.i];
    [sun_misc_FpUtils _PUT_twoToTheDoubleScaleUp: _r0.d];
    _r0.i = -512;
    _r0.d = [sun_misc_FpUtils powerOfTwoD___int:_r0.i];
    [sun_misc_FpUtils _PUT_twoToTheDoubleScaleDown: _r0.d];
    return;
    label28:;
    _r0.i = 0;
    goto label9;
}

@end

